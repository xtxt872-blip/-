 - تحديثات آلية عبر Firebase Remote Config لضبط الميزات من الخلفية.
  - OTA محتوى (أصول/بيانات) عبر خادم خارجي، مع توجيه التحديثات للمستخدمين.
  - أمان: مفاتيح API مخزنة بشكل آمن عبر Remote Config/بيئة التطوير وليس صريحة في الكود.
- سأزوّدك بنسخة كاملة من الشيفرة ومسار البناء خطوة بخطوة. بعدها يمكنك:
  - بناء النسخة محلياً باستخدام Flutter وتثبيتها على جهازك.
  - أو رفع الكود إلى GitHub وسأزوّدك برابط المستودع (عند رغبتك).

ملف المشروع المقترح
- pubspec.yaml
- lib/
  - main.dart
  - models/video_item.dart
  - services/
    - api_service.dart
    - ai_service.dart
    - remote_config_service.dart
    - ota_update_service.dart
  - ui/
    - home_screen.dart
    - detail_screen.dart
    - widgets/video_card.dart
  - assets/ (صور ومخططات اختيارية)
- README.md يشرح التثبيت والتشغيل وخطة التحديث

الآن أقدّم لك الكود الكامل جاهزاً للنسخ في مشروع Flutter جديد. انسخ كل جزء في مكانه كما هو، ثم اتبع تعليمات البناء في نهاية الرسالة.

1) pubspec.yaml
هذا ملف الاعتمادات الأساسية للمشروع.

```yaml
name: videohub_ar
description: نسخة عربية احترافية من ڤيديو هب مع AI وتحديثات آلية
publish_to: 'none'
version: 1.0.0+1

environment:
  sdk: ">=3.0.0 <4.0.0"

dependencies:
  flutter:
    sdk: flutter
  provider: ^6.0.2
  http: ^0.14.0
  video_player: ^2.4.2
  hive: ^2.2.0
  hive_flutter: ^1.1.0
  path_provider: ^2.0.11
  intl: ^0.17.0
  firebase_core: ^2.15.0
  firebase_remote_config: ^1.3.0
  in_app_update: ^4.0.1
  flutter_localizations:
    sdk: flutter

dev_dependencies:
  flutter_test:
    sdk: flutter

flutter:
  uses-material-design: true
```

2) lib/main.dart
إعداد التطبيق مع دعم RTL وتهيئة Remote Config و OTA عند التشغيل.

```dart
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:firebase_core/firebase_core.dart';
import 'services/remote_config_service.dart';
import 'ui/home_screen.dart';
import 'services/ota_update_service.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();

  // تهيئة Remote Config
  final rcService = RemoteConfigService();
  await rcService.initialize();

  // فحص التحديثات التلقائية (OTA)
  final ota = OtaUpdateService();
  ota.checkForUpdate();

  runApp(MyApp(rcService: rcService));
}

class MyApp extends StatelessWidget {
  final RemoteConfigService rcService;
  MyApp({required this.rcService});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ڨيديو هب',
      locale: Locale('ar', 'AE'),
      supportedLocales: [Locale('ar', 'AE')],
      localizationsDelegates: [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      theme: ThemeData(
        primarySwatch: Colors.blue,
        brightness: Brightness.light,
      ),
      home: HomeScreen(),
    );
  }
}
```

3) lib/models/video_item.dart
نموذج بيانات الفيديو.

```dart
class VideoItem {
  final String id;
  final String title;
  final String category;
  final String duration;
  final String thumbnail;
  final String videoUrl;
  final String description;

  VideoItem({
    required this.id,
    required this.title,
    required this.category,
    required this.duration,
    required this.thumbnail,
    required this.videoUrl,
    required this.description,
  });

  factory VideoItem.fromJson(Map<String, dynamic> json) => VideoItem(
        id: json['id'],
        title: json['title'],
        category: json['category'],
        duration: json['duration'],
        thumbnail: json['thumbnail'],
        videoUrl: json['videoUrl'],
        description: json['description'],
      );
}
```

4) lib/services/api_service.dart
نماذج البيانات واستدعاء بيانات الفيديو (يمكن التحويل لاحقاً إلى REST/GraphQL).

```dart
import 'dart:async';
import '../models/video_item.dart';

class ApiService {
  Future<List<VideoItem>> fetchVideos() async {
    await Future.delayed(Duration(milliseconds: 600));
    return [
      VideoItem(
        id: 'v1',
        title: 'تعلم البرمجة بالعربية للمبتدئين',
        category: 'تعليم',
        duration: '9:32',
        thumbnail: 'https://via.placeholder.com/400x230?text=فيديو+1
',
        videoUrl: 'https://www.w3schools.com/html/mov_bbb.mp4
',
        description: 'دليل تمهيدي لأساسيات البرمجة.',
      ),
      VideoItem(
        id: 'v2',
        title: 'تصوير فيديو احترافي من الهاتف',
        category: 'تصوير',
        duration: '7:20',
        thumbnail: 'https://via.placeholder.com/400x230?text=فيديو+2
',
        videoUrl: 'https://www.w3schools.com/html/movie.mp4
',
        description: 'تقنيات التصوير الأساسية باستخدام الهاتف.',
      ),
      VideoItem(
        id: 'v3',
        title: 'مونتاج سريع للمبتدئين',
        category: 'مونتاج',
        duration: '12:05',
        thumbnail: 'https://via.placeholder.com/400x230?text=فيديو+3
',
        videoUrl: 'https://www.w3schools.com/html/mov_bbb.mp4
',
        description: 'أساسيات المونتاج في دقائق.',
      ),
      // أضف عناصر إضافية إن رغبت
    ];
  }
}
```

5) lib/services/ai_service.dart
دمج بسيط لـ OpenAI لتوليد الملخص (يتطلب مفتاح API آمن). يتم إرسال المفتاح عبر Remote Config في هذه النسخة.

```dart
import 'dart:convert';
import 'package:http/http.dart' as http;

class AiService {
  final String apiKey;
  AiService({required this.apiKey});

  Future<String> summarize(String text) async {
    if (apiKey.isEmpty) return 'الملخص غير متاح حالياً (لم يتم توفير مفتاح OpenAI).';

    final url = Uri.parse('https://api.openai.com/v1/chat/completions
');
    final response = await http.post(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $apiKey',
      },
      body: jsonEncode({
        'model': 'gpt-3.5-turbo',
        'messages': [
          {'role': 'system', 'content': 'أنت مُلخّص فيديو بالعربية.'},
          {'role': 'user', 'content': 'اختصر النص التالي بشكل واضح وجذاب: $text'}
        ],
        'temperature': 0.5,
        'max_tokens': 200
      }),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      final content = data['choices'][0]['message']['content'] as String;
      return content.trim();
    } else {
      return 'فشل في توليد الملخص حالياً';
    }
  }
}
```

6) lib/services/remote_config_service.dart
تهيئة Firebase Remote Config وتخزين قيم الميزات المفتاحية.

```dart
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_remote_config/firebase_remote_config.dart';

class RemoteConfigService {
  late final RemoteConfig _remoteConfig;
  bool aiEnabled = false;
  String openAiApiKey = '';

  Future<void> initialize() async {
    // يفترض تجهيز Firebase في المشروع (google-services.json / GoogleService-Info.plist)
    await Firebase.initializeApp();
    _remoteConfig = RemoteConfig.instance;

    await _remoteConfig.setConfigSettings(RemoteConfigSettings(
      fetchTimeout: Duration(seconds: 5),
      minimumFetchInterval: Duration(hours: 1),
    ));

    await _remoteConfig.fetchAndActivate();

    aiEnabled = _remoteConfig.getBool('ai_enabled');
    openAiApiKey = _remoteConfig.getString('openai_api_key');
  }

  // getters للسهولة
  bool get isAiEnabled => aiEnabled;
  String get apiKey => openAiApiKey;
}
```

7) lib/services/ota_update_service.dart
مثال بسيط لاستخدام In-App Updates على أندرويد. ملاحظة أنه لا يوجد دعم مباشر لنظام iOS في هذه التقنية خارج متجر التطبيقات.

```dart
import 'package:in_app_update/in_app_update.dart';

class OtaUpdateService {
  Future<void> checkForUpdate() async {
    try {
      AppUpdateInfo info = await InAppUpdate.checkForUpdate();
      if (info.updateAvailability == UpdateAvailability.updateAvailable) {
        await InAppUpdate.performImmediateUpdate();
      }
    } catch (e) {
      // تجاهل الخطأ بشكل آمن
    }
  }
}
```

8) lib/ui/home_screen.dart
واجهة رئيسية عربية مع بحث، تصنيفات، وبطاقات الفيديو.

```dart
import 'package:flutter/material.dart';
import '../models/video_item.dart';
import '../services/api_service.dart';
import '../services/remote_config_service.dart';
import 'detail_screen.dart';
import '../services/ai_service.dart';

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final ApiService _api = ApiService();
  late Future<List<VideoItem>> _futureVideos;
  String _query = '';
  String _activeCategory = 'الكل';
  final List<String> _categories = ['الكل', 'تعليم', 'تصوير', 'مونتاج'];

  // للاستخدام المحتمل لمفتاح API من Remote Config
  late final RemoteConfigService _rcService;

  @override
  void initState() {
    super.initState();
    _rcService = RemoteConfigService();
    _init();
  }

  Future<void> _init() async {
    await _rcService.initialize();
    setState(() {}); // لا حاجة لمراجعة القيمة فوراً هنا لكنها تعلن جاهزية RC
    _futureVideos = _api.fetchVideos();
  }

  @override
  Widget build(BuildContext context) {
    // نعرض الشاشة مع FutureBuilder حتى يتم جلب الفيديوهات
    return Scaffold(
      appBar: AppBar(
        title: Text('ڨيديو هب - العربية'),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: () => setState(() => _futureVideos = _api.fetchVideos()),
            tooltip: 'إعادة تحميل',
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Column(
          children: [
            _buildSearch(),
            _buildCategories(),
            Expanded(
              child: FutureBuilder<List<VideoItem>>(
                future: _futureVideos,
                builder: (ctx, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return Center(child: CircularProgressIndicator());
                  } else if (snapshot.hasError) {
                    return Center(child: Text('حدث خطأ في التحميل'));
                  } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                    return Center(child: Text('لا توجد مقاطع'));
                  }

                  var items = snapshot.data!;
                  items = items.where((v) {
                    final matchesQuery = _query.isEmpty || v.title.contains(_query);
                    final matchesCat = _activeCategory == 'الكل' || v.category == _activeCategory;
                    return matchesQuery && matchesCat;
                  }).toList();

                  return GridView.builder(
                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      childAspectRatio: 0.8,
                      crossAxisSpacing: 10,
                      mainAxisSpacing: 10,
                    ),
                    itemCount: items.length,
                    itemBuilder: (ctx, i) {
                      final item = items[i];
                      return VideoCard(
                        video: item,
                        onTap: () {
                          Navigator.of(context).push(
                            MaterialPageRoute(
                              builder: (_) => DetailScreen(video: item),
                            ),
                          );
                        },
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSearch() {
    return TextField(
      textAlign: TextAlign.right,
      decoration: InputDecoration(
        hintText: 'ابحث عن فيديو...',
        prefixIcon: Icon(Icons.search),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
        filled: true,
        fillColor: Colors.white,
      ),
      onChanged: (v) => setState(() => _query = v),
    );
  }

  Widget _buildCategories() {
    return SizedBox(
      height: 40,
      child: ListView(
        scrollDirection: Axis.horizontal,
        children: _categories.map((c) {
          final isActive = c == _activeCategory;
          return Padding(
            padding: const EdgeInsets.symmetric(horizontal: 6.0),
            child: ChoiceChip(
              label: Text(c),
              selected: isActive,
              onSelected: (sel) {
                setState(() => _activeCategory = c);
              },
            ),
          );
        }).toList(),
      ),
    );
  }
}
```

9) lib/ui/detail_screen.dart
شاشة التفاصيل مع مشغّل فيديو وملخص AI.

```dart
import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';
import '../models/video_item.dart';
import '../services/ai_service.dart';
import '../services/remote_config_service.dart';

class DetailScreen extends StatefulWidget {
  final VideoItem video;
  DetailScreen({required this.video});

  @override
  _DetailScreenState createState() => _DetailScreenState();
}

class _DetailScreenState extends State<DetailScreen> {
  late VideoPlayerController _controller;
  bool _initialized = false;
  String _summary = '';
  bool _aiEnabled = false;

  @override
  void initState() {
    super.initState();
    _initVideo();
    _initAi();
  }

  Future<void> _initVideo() async {
    _controller = VideoPlayerController.network(widget.video.videoUrl)
      ..initialize().then((_) {
        setState(() { _initialized = true; });
        _controller.play();
      });
  }

  Future<void> _initAi() async {
    final rc = RemoteConfigService();
    await rc.initialize();
    _aiEnabled = rc.aiEnabled;
    if (_aiEnabled) {
      final apiKey = rc.apiKey;
      final ai = AiService(apiKey: apiKey);
      final sum = await ai.summarize(widget.video.description);
      setState(() {
        _summary = sum;
      });
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.video.title)),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _initialized
                ? AspectRatio(
                    aspectRatio: _controller.value.aspectRatio,
                    child: VideoPlayer(_controller),
                  )
                : Container(height: 200, color: Colors.black12, child: Center(child: CircularProgressIndicator())),
            Padding(
              padding: const EdgeInsets.all(12.0),
              child: Text(widget.video.description, style: TextStyle(fontSize: 16)),
            ),
            if (_summary.isNotEmpty)
              Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('الملخص الآلي', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
                    SizedBox(height: 6),
                    Text(_summary),
                  ],
                ),
              ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            _controller.value.isPlaying ? _controller.pause() : _controller.play();
          });
        },
        child: Icon(_controller.value.isPlaying ? Icons.pause : Icons.play_arrow),
      ),
    );
  }
}
```

10) lib/ui/widgets/video_card.dart
بطاقة فيديو قابلة لإعادة الاستخدام.

```dart
import 'package:flutter/material.dart';
import '../models/video_item.dart';

class VideoCard extends StatelessWidget {
  final VideoItem video;
  final VoidCallback onTap;

  VideoCard({required this.video, required this.onTap});

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: onTap,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Expanded(
              child: ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(12)),
                child: Image.network(video.thumbnail, fit: BoxFit.cover),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Text(video.title, maxLines: 2, style: TextStyle(fontWeight: FontWeight.w600)),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(video.category, style: TextStyle(fontSize: 12, color: Colors.grey)),
                  Text(video.duration, style: TextStyle(fontSize: 12, color: Colors.grey)),
                ],
              ),
            ),
            SizedBox(height: 6)
          ],
        ),
      ),
    );
  }
}
```

11) README.md
دليل التثبيت والبناء وخطة التحديثات.

- الملخص:
  - متطلبات البيئة: Flutter SDK، Android Studio/Xcode، Firebase Console لإعداد Remote Config، مفتاح OpenAI إذا رغبت في استخدام الملخص.
  - خطوات البناء على جهازك:
    1) إنشاء مشروع Flutter جديد.
    2) نسخ الملفات أعلاه إلى مشروعك حسب المسار.
    3) إعداد Firebase وتفعـيل Remote Config:
       - أضف google-services.json (Android) و GoogleService-Info.plist (iOS).
       - تفعيل Remote Config وإضافة المفاتيح ai_enabled (bool) و openai_api_key (string).
    4) وضع OpenAI API Key في Remote Config أو إدخاله بشكل آمن للبيئة التطويرية.
    5) تشغيل:
       - flutter pub get
       - flutter run
